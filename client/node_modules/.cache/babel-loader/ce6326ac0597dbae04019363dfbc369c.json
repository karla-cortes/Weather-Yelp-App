{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/karlacortes/Desktop/Projects/Web Development/Weather App/frontend/src/components/Data.js\";\nimport React, { Component } from 'react';\nimport Weather from './Weather';\nimport CurrentWeather from './CurrentWeather';\nimport WeekWeather from './WeekWeather';\nimport Places from './Places';\nimport axios from \"axios\";\n\nconst moment = require('moment-timezone');\n\nclass Data extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.handleSubmit(34.0522, 118.2437, 'Los Angeles, CA, USA');\n    };\n\n    this.handleSubmit = (latitude, longitude, cityname) => {\n      let lat = latitude.toString();\n      let long = longitude.toString();\n      let cityName = cityname;\n      let LatLng = lat.concat(',', long);\n      let WeatherLatLng = `lat=${lat}&lon=${long}`;\n      axios.get(`/places/${LatLng}`).then(response => {\n        let res = response.data;\n        this.setState({\n          places: res.businesses\n        });\n        this.getStars(res.businesses);\n      }).catch(error => {\n        console.log(error);\n      });\n      axios.get(`/weather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        let list = [];\n\n        for (let i = 0; i < res.list.length; i += 8) {\n          list.push([moment(res.list[i].dt_txt).format('ddd'), res.list[i].weather[0].id, res.list[i].weather[0].main, res.list[i].weather[0].description, Math.ceil(res.list[i].main.temp_max), Math.floor(res.list[i].main.temp_min)]);\n        }\n\n        this.setState({\n          location: cityName,\n          weather: list\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      axios.get(`/currentweather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        this.setState({\n          date: this.currentDate(res.dt, res.timezone),\n          currentWeather: res.weather[0],\n          currentWeatherTemps: res.main,\n          high: Math.ceil(res.main.temp_max),\n          low: Math.floor(res.main.temp_min),\n          currentWind: Math.ceil(res.wind.speed),\n          sunrise: `${this.getTimes(res.sys.sunrise, res.timezone)} AM`,\n          sunset: `${this.getTimes(res.sys.sunset, res.timezone)} PM`\n        });\n        console.log(res.main.temp_max);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.currentDate = (time, tzoffset) => {\n      let srTime = new Date((time + tzoffset) * 1000);\n      srTime = moment(srTime).format('LL');\n      return srTime;\n    };\n\n    this.getTimes = (time, tzoffset) => {\n      const srTime = new Date((time + tzoffset) * 1000);\n\n      const twoDigits = val => {\n        return ('0' + val).slice(-2);\n      };\n\n      let hours = twoDigits(srTime.getUTCHours());\n      hours > 12 ? hours = hours - 12 : hours = hours.substring(1);\n      ;\n      const minutes = twoDigits(srTime.getUTCMinutes());\n      const finalTime = `${hours}:${minutes}`;\n      return finalTime;\n    };\n\n    this.getStars = bus => {\n      let places = bus;\n      let ratingsArr = [];\n\n      for (let index in places) {\n        const starsTotal = 5;\n        const starPercentage = places[index].rating / starsTotal * 100;\n        let starPercentageRounded = `${Math.round(starPercentage / 10) * 10}%`;\n        ratingsArr.push(starPercentageRounded);\n      }\n\n      this.setState({\n        ratings: ratingsArr\n      });\n    };\n\n    this.state = {\n      currentWeather: [],\n      date: '',\n      places: [],\n      currentWeatherTemps: [],\n      currentWind: '',\n      location: '',\n      high: '',\n      low: '',\n      weather: [],\n      sunrise: '',\n      sunset: '',\n      ratings: ''\n    };\n  }\n\n  render() {\n    console.log(this.state.ratings);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sample-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar-mobile\",\n          children: /*#__PURE__*/_jsxDEV(Weather, {\n            handleSubmit: this.handleSubmit.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          high: this.state.high,\n          low: this.state.low,\n          date: this.state.date,\n          location: this.state.location,\n          currentWeather: this.state.currentWeather,\n          currentWeatherTemps: this.state.currentWeatherTemps,\n          currentWind: this.state.currentWind,\n          sunset: this.state.sunset,\n          sunrise: this.state.sunrise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weeks-weather-places\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-bar-desktop\",\n            children: /*#__PURE__*/_jsxDEV(Weather, {\n              handleSubmit: this.handleSubmit.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(WeekWeather, {\n            weather: this.state.weather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Places, {\n            places: this.state.places,\n            ratings: this.state.ratings\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Data;","map":{"version":3,"sources":["/Users/karlacortes/Desktop/Projects/Web Development/Weather App/frontend/src/components/Data.js"],"names":["React","Component","Weather","CurrentWeather","WeekWeather","Places","axios","moment","require","Data","constructor","props","componentDidMount","handleSubmit","latitude","longitude","cityname","lat","toString","long","cityName","LatLng","concat","WeatherLatLng","get","then","response","res","data","setState","places","businesses","getStars","catch","error","console","log","list","i","length","push","dt_txt","format","weather","id","main","description","Math","ceil","temp_max","floor","temp_min","location","date","currentDate","dt","timezone","currentWeather","currentWeatherTemps","high","low","currentWind","wind","speed","sunrise","getTimes","sys","sunset","time","tzoffset","srTime","Date","twoDigits","val","slice","hours","getUTCHours","substring","minutes","getUTCMinutes","finalTime","bus","ratingsArr","index","starsTotal","starPercentage","rating","starPercentageRounded","round","ratings","state","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Weather from './Weather';\nimport CurrentWeather from './CurrentWeather';\nimport WeekWeather from './WeekWeather';\nimport Places from './Places';\nimport axios from \"axios\";\n\nconst moment = require('moment-timezone');\n\nclass Data extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentWeather: [],\n            date: '',\n            places: [],\n            currentWeatherTemps: [],\n            currentWind: '',\n            location: '',\n            high: '',\n            low: '',\n            weather: [],\n            sunrise: '',\n            sunset: '',\n            ratings: ''\n        }\n    }\n\ncomponentDidMount = () => {\n    this.handleSubmit(34.0522,118.2437,'Los Angeles, CA, USA');\n}\n\nhandleSubmit = (latitude,longitude, cityname) => {\n    let lat = latitude.toString();\n    let long = longitude.toString();\n    let cityName = cityname;\n    let LatLng = lat.concat(',',long);\n    let WeatherLatLng = `lat=${lat}&lon=${long}`;\n\n    axios.get(`/places/${LatLng}`).then(response => {\n        let res = response.data;\n        this.setState({places: res.businesses});\n        this.getStars(res.businesses);\n    }).catch((error) => { console.log(error)});\n   \n    axios.get(`/weather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        let list = [];\n        for(let i= 0; i < res.list.length; i += 8) {\n            list.push([moment(res.list[i].dt_txt).format('ddd'),res.list[i].weather[0].id,res.list[i].weather[0].main, res.list[i].weather[0].description,Math.ceil(res.list[i].main.temp_max),Math.floor(res.list[i].main.temp_min),]); \n        }\n        this.setState({ location: cityName, weather: list})\n    }).catch((error) => { console.log(error)});\n\n    axios.get(`/currentweather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        this.setState({ date: this.currentDate(res.dt, res.timezone), currentWeather: res.weather[0], currentWeatherTemps: res.main, high: Math.ceil(res.main.temp_max), low: Math.floor(res.main.temp_min), currentWind: Math.ceil(res.wind.speed), sunrise: `${this.getTimes(res.sys.sunrise, res.timezone)} AM`, sunset: `${this.getTimes(res.sys.sunset, res.timezone)} PM`}) \n        console.log(res.main.temp_max);\n    }).catch((error) => { console.log(error)});\n}\n\ncurrentDate = (time,tzoffset) => {\n    let srTime = new Date((time+tzoffset)*1000);\n    srTime = moment(srTime).format('LL');\n    return srTime;\n}\n\ngetTimes = (time,tzoffset) => {\n    const srTime = new Date((time+tzoffset)*1000);\n    const twoDigits = (val) => {\n        return ('0' + val).slice(-2);\n      };\n    let hours = twoDigits(srTime.getUTCHours());\n    hours > 12 ? hours = hours - 12 : hours = hours.substring(1);;\n    const minutes = twoDigits(srTime.getUTCMinutes());\n    const finalTime =`${hours}:${minutes}`\n    return finalTime;\n}\n\ngetStars = (bus) => {\n    let places = bus;\n    let ratingsArr = [];\n    for (let index in places) { \n       const starsTotal = 5;\n       const starPercentage = (places[index].rating/ starsTotal) * 100;\n       let starPercentageRounded = `${Math.round(starPercentage / 10) * 10}%`;\n        ratingsArr.push(starPercentageRounded);\n        \n    }\n    this.setState({ratings: ratingsArr});\n}\n\n\n    \n    render() { \n        console.log(this.state.ratings)\n        return ( \n            <React.Fragment>\n                \n                <div className=\"sample-section\">\n                <div className=\"search-bar-mobile\">\n                <Weather handleSubmit={this.handleSubmit.bind(this)} />\n                </div>\n                <CurrentWeather high={this.state.high} low={this.state.low} date={this.state.date} location={this.state.location} currentWeather={this.state.currentWeather} currentWeatherTemps={this.state.currentWeatherTemps} currentWind={this.state.currentWind} sunset={this.state.sunset} sunrise={this.state.sunrise} />\n                <div className=\"weeks-weather-places\">\n                <div className=\"search-bar-desktop\">\n                <Weather handleSubmit={this.handleSubmit.bind(this)}/>\n                </div>\n                <WeekWeather weather={this.state.weather} />\n                <Places places={this.state.places} ratings={this.state.ratings} />\n                </div>\n                </div>\n            </React.Fragment>\n         );\n    }\n}\n \nexport default Data;"]},"metadata":{},"sourceType":"module"}