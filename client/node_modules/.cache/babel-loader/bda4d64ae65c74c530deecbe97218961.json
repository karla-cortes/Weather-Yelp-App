{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/karlacortes/Desktop/Projects/Weather App/frontend/src/components/Data.js\";\nimport React, { Component } from 'react';\nimport Weather from './Weather';\nimport CurrentWeather from './CurrentWeather';\nimport WeekWeather from './WeekWeather';\nimport Places from './Places';\nimport axios from \"axios\";\n\nconst moment = require('moment-timezone');\n\nclass Data extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = (latitude, longitude, cityname) => {\n      let lat = latitude.toString();\n      let long = longitude.toString();\n      let cityName = cityname;\n      let LatLng = lat.concat(',', long);\n      let WeatherLatLng = `lat=${lat}&lon=${long}`;\n      axios.get(`/places/${LatLng}`).then(response => {\n        let res = response.data;\n        this.setState({\n          places: res.businesses\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      axios.get(`/weather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        let list = [];\n\n        for (let i = 0; i < res.list.length; i += 8) {\n          list.push([res.list[i].dt_txt, res.list[i].weather[0].icon, res.list[i].weather[0].main, Math.ceil(res.list[i].main.temp_max), Math.floor(res.list[i].main.temp_min)]);\n        }\n\n        this.setState({\n          location: cityName,\n          weather: list\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n      axios.get(`/currentweather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        this.setState({\n          currentWeather: res.weather[0],\n          currentWeatherTemps: res.main,\n          currentWind: res.wind.speed,\n          sunrise: res.sys.sunrise,\n          sunset: res.sys.sunset\n        });\n        this.getTimes(res.sys.sunrise, res.timezone);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.getTimes = (sunrise, tzoffset) => {\n      const srTime = new Date((sunrise + tzoffset) * 1000);\n\n      const twoDigits = val => {\n        return ('0' + val).slice(-2);\n      };\n\n      const year = srTime.getUTCFullYear();\n      const month = twoDigits(srTime.getUTCMonth() + 1);\n      const dayOfMonth = twoDigits(srTime.getUTCDate());\n      const hours = twoDigits(srTime.getUTCHours());\n      const minutes = twoDigits(srTime.getUTCMinutes());\n      const seconds = twoDigits(srTime.getUTCSeconds());\n      const sunriseTime = `${year}-${month}-${dayOfMonth} ${hours}:${minutes}:${seconds}`;\n      console.log(sunriseTime);\n    };\n\n    this.state = {\n      currentWeather: [],\n      places: [],\n      currentWeatherTemps: [],\n      currentWind: '',\n      location: '',\n      weather: [],\n      sunrise: '',\n      sunset: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Weather, {\n        handleSubmit: this.handleSubmit.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {\n        location: this.state.location,\n        currentWeather: this.state.currentWeather,\n        currentWeatherTemps: this.state.currentWeatherTemps,\n        currentWind: this.state.currentWind,\n        sunset: this.state.sunset,\n        sunrise: this.state.sunrise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WeekWeather, {\n        weather: this.state.weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Places, {\n        places: this.state.places\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Data;","map":{"version":3,"sources":["/Users/karlacortes/Desktop/Projects/Weather App/frontend/src/components/Data.js"],"names":["React","Component","Weather","CurrentWeather","WeekWeather","Places","axios","moment","require","Data","constructor","props","handleSubmit","latitude","longitude","cityname","lat","toString","long","cityName","LatLng","concat","WeatherLatLng","get","then","response","res","data","setState","places","businesses","catch","error","console","log","list","i","length","push","dt_txt","weather","icon","main","Math","ceil","temp_max","floor","temp_min","location","currentWeather","currentWeatherTemps","currentWind","wind","speed","sunrise","sys","sunset","getTimes","timezone","tzoffset","srTime","Date","twoDigits","val","slice","year","getUTCFullYear","month","getUTCMonth","dayOfMonth","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","sunriseTime","state","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Weather from './Weather';\nimport CurrentWeather from './CurrentWeather';\nimport WeekWeather from './WeekWeather';\nimport Places from './Places';\nimport axios from \"axios\";\n\nconst moment = require('moment-timezone');\n\nclass Data extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentWeather: [],\n            places: [],\n            currentWeatherTemps: [],\n            currentWind: '',\n            location: '',\n            weather: [],\n            sunrise: '',\n            sunset: ''\n        }\n    }\n\nhandleSubmit = (latitude,longitude, cityname) => {\n    let lat = latitude.toString();\n    let long = longitude.toString();\n    let cityName = cityname;\n    let LatLng = lat.concat(',',long);\n    let WeatherLatLng = `lat=${lat}&lon=${long}`;\n\n    axios.get(`/places/${LatLng}`).then(response => {\n        let res = response.data;\n        this.setState({places: res.businesses})\n    }).catch((error) => { console.log(error)});\n   \n    axios.get(`/weather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        let list = [];\n        for(let i= 0; i < res.list.length; i += 8) {\n            list.push([res.list[i].dt_txt,res.list[i].weather[0].icon,res.list[i].weather[0].main,Math.ceil(res.list[i].main.temp_max),Math.floor(res.list[i].main.temp_min)]); \n        }\n        this.setState({ location: cityName, weather: list})\n    }).catch((error) => { console.log(error)});\n\n    axios.get(`/currentweather/${WeatherLatLng}`).then(response => {\n        let res = response.data;\n        this.setState({ currentWeather: res.weather[0], currentWeatherTemps: res.main, currentWind: res.wind.speed, sunrise: res.sys.sunrise, sunset: res.sys.sunset})\n       this.getTimes(res.sys.sunrise, res.timezone);\n    }).catch((error) => { console.log(error)});\n}\n\ngetTimes = (sunrise,tzoffset) => {\n    const srTime = new Date((sunrise+tzoffset)*1000);\n    const twoDigits = (val) => {\n        return ('0' + val).slice(-2);\n      };\n      const year = srTime.getUTCFullYear();\n      const month = twoDigits(srTime.getUTCMonth()+1);\n      const dayOfMonth = twoDigits(srTime.getUTCDate());\n      const hours = twoDigits(srTime.getUTCHours());\n      const minutes = twoDigits(srTime.getUTCMinutes());\n      const seconds = twoDigits(srTime.getUTCSeconds());\n      const sunriseTime =`${year}-${month}-${dayOfMonth} ${hours}:${minutes}:${seconds}`\n      console.log(sunriseTime);\n}\n    \n    render() { \n        return ( \n            <div>\n                <Weather handleSubmit={this.handleSubmit.bind(this)}/>\n                <CurrentWeather location={this.state.location} currentWeather={this.state.currentWeather} currentWeatherTemps={this.state.currentWeatherTemps} currentWind={this.state.currentWind} sunset={this.state.sunset} sunrise={this.state.sunrise} />\n                <WeekWeather weather={this.state.weather} />\n                <Places places={this.state.places} />\n            </div>\n         );\n    }\n}\n \nexport default Data;"]},"metadata":{},"sourceType":"module"}