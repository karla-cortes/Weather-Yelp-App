{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/karlacortes/Desktop/Projects/Web Development/Weather App/frontend/src/components/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport scriptLoader from \"react-async-script-loader\";\nlibrary.add(faSearch);\n\nfunction Weather({\n  handleSubmit,\n  isScriptLoaded,\n  isScriptLoadSucceed\n}) {\n  _s();\n\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    handleSubmit(latLng.lat, latLng.lng, value);\n    setAddress(value);\n    setCoordinates(latLng);\n  };\n\n  if (isScriptLoaded && isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-section\",\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        searchOptions: {\n          types: ['geocode']\n        },\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faSearch,\n              className: suggestions.active ? \"none\" : \"search-button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: \"Search City or Zip Code\"\n              }),\n              type: \"search\",\n              className: EventTarget.value ? 'none-bar' : 'search-bar-bar'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"drop-down\",\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 31\n            }, this), suggestions.map(suggestion => {\n              const style = suggestion.active ? {\n                backgroundColor: \"#a83232\",\n                cursor: \"pointer\"\n              } : {\n                backgroundColor: \"#ffffff\",\n                cursor: \"pointer\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 14\n    }, this);\n  }\n}\n\n_s(Weather, \"In+Ph3uOLohdgW4UpdPfq2wOwbs=\");\n\n_c = Weather;\nexport default scriptLoader([`https://maps.googleapis.com/maps/api/js?key=AIzaSyAdjCck2Sns4vUNqVAqimDhZITv34DKVVQ&libraries=places`])(Weather);\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/karlacortes/Desktop/Projects/Web Development/Weather App/frontend/src/components/Weather.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","library","FontAwesomeIcon","faSearch","scriptLoader","add","Weather","handleSubmit","isScriptLoaded","isScriptLoadSucceed","address","setAddress","useState","coordinates","setCoordinates","lat","lng","handleChange","value","handleSelect","results","latLng","types","getInputProps","suggestions","getSuggestionItemProps","loading","active","placeholder","EventTarget","map","suggestion","style","backgroundColor","cursor","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport scriptLoader from \"react-async-script-loader\";\n\nlibrary.add(faSearch);\nfunction Weather({handleSubmit, isScriptLoaded, isScriptLoadSucceed}) {\n   \n   const [address, setAddress] = React.useState(\"\");\n   const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n    const handleChange = (value) => {\n      setAddress(value)\n    }\n\n    const handleSelect = async value => {\n      const results = await geocodeByAddress(value);\n      const latLng = await getLatLng(results[0]);\n      handleSubmit(latLng.lat,latLng.lng, value);\n      setAddress(value);\n      setCoordinates(latLng);\n    };\n \n  \n    \n    if (isScriptLoaded && isScriptLoadSucceed) {\n      return (\n        <div className=\"top-section\">\n          <PlacesAutocomplete\n            value={address}\n            onChange={handleChange}\n            onSelect={handleSelect}\n            searchOptions={{ types: ['geocode']}}\n          >\n            {({\n              getInputProps,\n              suggestions,\n              getSuggestionItemProps,\n              loading,\n            }) => (\n              <div className=\"search-bar\">    \n                <form >\n                <FontAwesomeIcon icon={faSearch}  className={suggestions.active ? \"none\" : \"search-button\"}/>\n                <input\n                  {...getInputProps({\n                    placeholder: \"Search City or Zip Code\",\n                  })}\n                type=\"search\" className={EventTarget.value ? 'none-bar' : 'search-bar-bar'}/>\n               \n               </form>\n           \n                <div className=\"drop-down\">\n                  {loading && <div>Loading...</div>}\n                  {suggestions.map((suggestion) => {\n                      \n                    const style = suggestion.active\n                      ? { backgroundColor: \"#a83232\", cursor: \"pointer\" }\n                      : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n  \n                    return (\n                      <div {...getSuggestionItemProps(suggestion, { style })}>\n                        {suggestion.description}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </PlacesAutocomplete>\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n\n\n  export default scriptLoader([\n    `https://maps.googleapis.com/maps/api/js?key=AIzaSyAdjCck2Sns4vUNqVAqimDhZITv34DKVVQ&libraries=places`,\n  ])(Weather);"]},"metadata":{},"sourceType":"module"}